:source-highlighter: pygments
:stem:

= Processamento Digital de Imagens
Filipe Viana <filipeviana_@live.com>; Gusttavo Silva <gust.tavohenrique@hotmail.com>
:toc: left
:toc-title: Sumário

== 1. Introdução

Neste relatório, serão mostrados os códigos de implementação das atividades da disciplina Processamento Digital de Imagens do curso de Engenharia de Computação da Universidade Federal do Rio Grande do Norte (UFRN). Nesse documento, abordaremos sobre o uso da biblioteca openCV (Open Source Computer Vision Library), bastante utilizada na resolução de problemas de tratamento de imagens, visão computacional e reconhecimento de padrões.

Obs.: a compilação de todos os programas presentes nesse relatório é feita juntamente com o programa link:Projetos/Makefile[Makefile].

== 2. Manipulando pixels em uma imagem

=== 2.1 Negativo de uma região da imagem
link:http://agostinhobritojr.github.io/tutoriais/pdi/#_exerc%C3%ADcios[Ver exercício 3.2.1]

O programa tem como parâmetro o caminho para um arquivo de imagem, que será carregada em um objeto do tipo Mat no formato de tons de cinza.
Uma região retangular dessa imagem, definida pelo usuário através das variaveis P1X, P2X, P1Y e P2Y, terá seus valores negativados, para
isso o valores dos pixels da região selecionada será 255 subtraído por ele mesmo. Dessa forma, a região definida pelo usuário terá tons
de cinza opostos ao original, criando o efeito de negativo.

Abaixo encontra-se o código do programa link:Projetos/regions.cpp[regions.cpp].

[[exa_regions, regions.cpp]]
[source,cpp]
.Listagem 1: regions.cpp
----
include::Projetos/regions.cpp[regions.cpp]
----

Aplicamos o algoritmo informando as entradas (15, 30) e (300, 280) para a imagem <<fig_arara>>. O resultado obtido é mostrado na imagem <<fig_negativo_arara>>.

[[fig_arara, arara.png]]
//[.text-center]
.Imagem original
image::images/arara.png[Imagem original, title="Imagem original"]

[[fig_negativo_arara, negativo_arara.png]]
//[.text-center]
.Imagem processada
image::images/negativo_arara.png[Imagem processada, title="Imagem processada"]

=== 2.2 Trocando regiões de uma imagem
link:http://agostinhobritojr.github.io/tutoriais/pdi/#_exerc%C3%ADcios[Ver exercício 3.2.2]

O programa <<exa_troca_regions>> tem como parâmetro um caminho para uma imagem, que será então carregada em tons de cinza. Esta imagem será dividida em quatro subregiões que serão embaralhadas, criando um quebra-cabeça, conforme um vetor de índices gerado randomicamente. Para a formação do quebra-cabeça os vetores 'vert', que armazena as coordenadas x e y das 4 subregiões no formato[x0,y0,x1,y2,...],
e o vetor 'vertPuzzle', que contêm a ordem em que as subregiões irão entrar na imagem do quebra-cabeça. A função copyTo(Mat, ROI) foi usada para fazer a cópia da região da imagem original para a nova região, dada pelo vetor 'vertPuzzle', no quebra-cabeça.

link:Projetos/trocaRegioes.cpp[Clique aqui] para obter o código do programa abaixo.

[[exa_troca_regions, trocaRegioes.cpp]]
[source,cpp]
.Listagem 2: trocaRegioes.cpp
----
include::Projetos/trocaRegioes.cpp[trocaRegioes.cpp]
----

O resultado do processamento acima na imagem link:images/arara.png[arara.png] está mostrado na imagem abaixo.

[[fig_troca_regions_arara, troca_regions_arara]]
//[.text-center]
.Imagem processada
image::images/troca_regions_arara.png[Imagem processada, title="Imagem processada"]

== 3. Preenchendo regiões

=== 3.1 Contagem de objetos 
link:http://agostinhobritojr.github.io/tutoriais/pdi/#_exerc%C3%ADcios_2[Ver exercício 4.2.1]

Mesmo que o contador seja maior que os 255, só há como o computador representar 255 tons de cinza. Dessa forma, na forma como o programa 
link:Projetos/labeling.cpp[labeling.cpp] está implementado, depois que o contador ultrapassar o nível de cinza 255, todos os objetos que 
passarem pelo processamento do floodFill terão seus níveis de cinza iguais a 255. 

Para a resolução desse problema, reiniciariamos o contador logo que ele passasse por 255. link:Projetos/contagem_objetos.cpp[Clique aqui] 
para obter o código do programa abaixo.

[[exa_contagem_objetos, contagem_objetos.cpp]]
[source,cpp]
.Listagem 3: contagem_objetos.cpp
----
include::Projetos/contagem_objetos.cpp[Clique aqui]
----

=== 3.2 Contagem de objetos com ou sem buracos
link:http://agostinhobritojr.github.io/tutoriais/pdi/#_exerc%C3%ADcios_2[Ver exercício 4.2.2]

A solução proposta para esse problema foi a seguinte: antes de tudo, desenhamos um retângulo com nível 
de cinza igual a 255 na borda da imagem. Depois disso, utilizamos a função floodFill no primeiro pixel 
da imagem mudando os valores dos tons dos pixels para zero. Dessa forma, os objetos que estavam em contato
com esse retangulo foram imdediatamente removidos.

Após a remoção dos objetos da borda, alteramos o ton do fundo da imagem para o valor 100.
Os buracos dos objetos continuaram com o ton de cinza 0 e os objetos com 255. Fazendo uma varredura
sequêncial nos pixels da imagem, ao encontrar um pixel com nível de cinza igual a 255, passamos o floodfill
mudando a cor do objeto para 200 e realizando a contagem do mesmo. Caso um pixel com valor igual a 0 fosse encontrado,
alteravamos sua cor para a nova cor de fundo e contabilzavamos um buraco. Para finalizar, passamos novamente
o floodFill no primeiro pixel da imagem para mudar a cor do fundo para 0.

link:Projetos/contagem_buracos.cpp[Clique aqui] para obter o código do programa abaixo.

[[exa_contagem_buracos, contagem_buracos.cpp]]
[source,cpp]
.Listagem 4: contagem_buracos.cpp
----
include::Projetos/contagem_buracos.cpp[contagem_buracos.cpp]
----

[[fig_bolhas, bolhas.png]]
//[.text-center]
.Imagem Original
image::images/bolhas.png[Imagem Original, title="Imagem Original"]

[[fig_bolhas_buracos, bolhas2.png]]
//[.text-center]
.Objetos com buracos identificados
image::images/bolhas2.png[Objetos com buracos identificados, title="Objetos com buracos identificados"]

== 4. Manipulação de histogramas

=== 4.1 Equalização do histograma
link:http://agostinhobritojr.github.io/tutoriais/pdi/#_exerc%C3%ADcios[Ver exercício 5.2.1]

O programa <<exa_equalize>> faz uso da webcam primária do dispositivo em que está sendo executado, a captura dos frames é dado pela classe
VideoCapture. A imagem capturada é então convertida para tons de cinza usando a função cvtColot(Mat, Mat, CV_BGR2GRAY) e essa imagem em tons 
de cinza tem é equalizada fazendo-se uso da função equalizeHist(Mat, Mat), que tem como entrada a imagem a ser equalizada e a imagem, ou elemento 
da classe Mat, que irá armazenar a imagem equalizada. 

link:Projetos/equalize.cpp[Clique aqui] para obter o código do programa.

[[exa_equalize, equalize.cpp]]
[source,cpp]
.Listagem 5: equalize.cpp
----
include::Projetos/equalize.cpp[equalize.cpp]
----

=== 4.2 Detector de movimentos
link:http://agostinhobritojr.github.io/tutoriais/pdi/#_exerc%C3%ADcios[Ver exercício 5.2.2]

Assim como o programa <<exa_equalize>>, o <<exa_motion_detector>> faz uso da classe VideoCapture para capturar imagens através de uma webcam
disponível no dispositivo em que está sendo executada. O frame capturado é então convertido de RGB para tons de cinza, e tem seu histograma 
calculado fazendo uso da função calcHist(). O histograma do frame é então armazenada para que possa ser comparado com o histograma do próximo 
frame a ser capturado. A função compareHist() então calcula a differença entre o histograma do frame capturado com o do frame capturado 
anteriormente, caso essa diferença ultrapasse um limiar definido no programa, temos então que houve movimento na região de captura da câmera, 
e um alerta é enviado ao usuário através do terminal.

link:Projetos/motionDetector.cpp[Clique aqui] para obter o código do programa.

[[exa_motion_detector, motionDetector.cpp]]
[source,cpp]
.Listagem 6: motionDetector.cpp
----
include::Projetos/motionDetector.cpp[motionDetector.cpp]
----

== 5. Filtragem no domínio espacial I

=== 5.1 Filtragem lapplaciano do gaussiano
link:http://agostinhobritojr.github.io/tutoriais/pdi/#_exerc%C3%ADcios_4[Ver exercício 6.2.1]

Para obter o resultado do laplaciano do gaussiano é necessário filtrar a imagem dada com um filtro gaussiano e, logo após, utilizar 
o filtro laplaciano no resultado da filtragem anterior. O resultado desse procedimento pode ser visto na imagem <<fig_laplgauss1>>. Comparando as imagens obtidas depois dos dois processamentos, foi possível observar que, ao realizar somente a filtragem do <<fig_laplaciano>>, a imagem processada apresenta bastante ruído. Já na imagem filtragem com o <<fig_laplgauss1>>, embora tenha havido perda de alguns detalhes, a imagem ficou com muito menos ou quase nenhum ruído.

link:Projetos/laplgauss.cpp[Clique aqui] para obter o código do programa abaixo.

[[exa_laplgauss, laplgauss.cpp]]
[source,cpp]
.Listagem 7: laplgauss.cpp
----
include::Projetos/laplgauss.cpp[laplgauss.cpp]
----

[[fig_laplgauss, imagem original]]
//[.text-center]
.Imagem original
image::images/laplgauss.jpg[Imagem original, title="Imagem original"]

[[fig_laplaciano, laplaciano]]
//[.text-center]
.Imagem processada com filtro laplaciano
image::images/laplgauss_2.jpg[Imagem processada com filtro laplaciano, title="Imagem processada com filtro laplaciano"]

[[fig_laplgauss1, laplgauss]]
//[.text-center]
.Imagem processada com filtro laplgauss
image::images/laplgauss_1.jpg[Imagem processada com filtro laplgauss, title="Imagem processada com filtro laplgauss"]

== 6. Filtragem no domínio espacial II

=== 6.1 Implementação do tiltshift em imagem
link:http://agostinhobritojr.github.io/tutoriais/pdi/#_exerc%C3%ADcios[Ver exercício 7.2.1]

=== 6.2 Implementação do tiltshift em vídeo
link:http://agostinhobritojr.github.io/tutoriais/pdi/#_exerc%C3%ADcios[Ver exercício 7.2.2]
